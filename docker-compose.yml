version: "3.3"
services:
  api-gateway-service:
    container_name: api-gateway-service
    build:
      context: ./APIGateway/
      dockerfile: Dockerfile
    image: docker-api-gateway-service
    ports:
      - 8989:8989
    networks:
      - restaurant
  discovery-service:
    container_name: discovery-service
    build:
      context: ./DiscoveryService/
      dockerfile: Dockerfile
    image: docker-discovery-service
    ports:
      - 8761:8761
    networks:
      - restaurant
  account-service:
    container_name: account-service
    build:
      context: ./RestaurantAccountService/
      dockerfile: Dockerfile
    image: docker-account-service
    ports:
      - 8083:8083
    networks:
      - restaurant
#  login-service:
#    container_name: login-service
#    build:
#      context: ./RestaurantLoginService/
#      dockerfile: Dockerfile
#    image: docker-login-service
#    ports:
#      - 8081:8081
#    networks:
#      - restaurant
  menu-service:
    container_name: menu-service
    image: restaurant-menu-service
    build:
      context: ./RestaurantMenuService/
      dockerfile: Dockerfile
    links:
      - redis-service:redis
    ports:
      - 8084:8084
    volumes:
      - ~/docker/redis:/redis-service/logs
    networks:
      - restaurant
  redis-service:
    container_name: redis-service
    image: docker-redis-service
    build:
      context: ./RestaurantMenuService/redis/
      dockerfile: Dockerfile
    hostname: redis
    ports:
      - 6379:6379
    networks:
      - restaurant
  zookeeper:
    image: wurstmeister/zookeeper
    ports:
      - 2181:2181
    container_name: zookeeper
    networks:
      - restaurant
  kafka:
    image: wurstmeister/kafka
    container_name: kafka
    ports:
      - 9092:9092
    environment:
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPIC: "my_topic:1:3"
    networks:
      - restaurant
  kafka-service:
    container_name: kafka-service
    build:
      context: ./KafkaService/
      dockerfile: Dockerfile
    image: docker-kafka-service
    ports:
      - 9000:9000
    networks:
      - restaurant
  reservation-service:
    container_name: reservation-service
    build:
      context: ./RestaurantReservationService/
      dockerfile: Dockerfile
    image: docker-reservation-service
    ports:
      - 8086:8086
    networks:
      - restaurant
  table-service:
    container_name: table-service
    build:
      context: ./RestaurantTableService/
      dockerfile: Dockerfile
    image: docker-table-service
    ports:
      - 8082:8082
    networks:
      - restaurant
  user-service:
    container_name: user-service
    build:
      context: ./RestaurantUserService/
      dockerfile: Dockerfile
    image: docker-user-service
    ports:
      - 8085:8085
    networks:
      - restaurant
networks:
  restaurant:
    name: restaurant
    driver: bridge